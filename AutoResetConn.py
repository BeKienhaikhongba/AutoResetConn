# -*- coding: utf-8 -*-
"""
Auto Reset DB Tool + Auto-Updater (Full) v5.0
- UI Tkinter qu·∫£n l√Ω c·∫•u h√¨nh DB (l∆∞u/ s·ª≠a/ x√≥a/ d√πng)
- Reset k·∫øt n·ªëi PostgreSQL th·ªß c√¥ng/ t·ª± ƒë·ªông m·ªói 1 gi·ªù
- Log ra file TXT theo ng√†y: Log/db_reset_YYYYMMDD.txt
- M√£ h√≥a password b·∫±ng Fernet (secret.key l∆∞u trong th∆∞ m·ª•c app)
- Danh s√°ch c·∫•u h√¨nh hi·ªÉn th·ªã d·∫°ng list highlight (kh√¥ng radio)
- N√∫t L∆∞u b·ªã disable khi ƒëang ch·ªçn c·∫•u h√¨nh
- Auto-Updater: ki·ªÉm tra version tr√™n GitHub, t·∫£i file core/... m·ªõi (n·∫øu c√≥)
"""

import tkinter as tk
from tkinter import messagebox, scrolledtext, Menu, Canvas
import json, os, time, threading
from datetime import datetime
import psycopg2
from cryptography.fernet import Fernet
import requests  # d√πng cho auto-updater

# ===================== CONFIG CHUNG =====================
APP_DIR = os.path.dirname(os.path.abspath(__file__))
CONFIG_FILE = os.path.join(APP_DIR, "db_config.json")
LOG_DIR = os.path.join(APP_DIR, "Log")
SECRET_KEY_FILE = "secret.key"
SECRET_KEY_PATH = os.path.join(APP_DIR, SECRET_KEY_FILE)

running = False
reset_thread = None
CONFIG_CACHE = []
edit_mode = False
selected_label = None
last_selected_name = ""

# ===================== AUTO UPDATER =====================
CURRENT_VERSION = "5.0.0"  # C·∫≠p nh·∫≠t s·ªë n√†y m·ªói khi build tool m·ªõi
VERSION_URL = "https://raw.githubusercontent.com/BeKienhaikhongba/AutoResetConn/refs/heads/main/version.txt"
FILES_TO_UPDATE = {
    # key = ƒë∆∞·ªùng local c·∫ßn ghi, value = URL raw tr√™n GitHub
    "core/AutoResetConn.py": "https://raw.githubusercontent.com/BeKienhaikhongba/AutoResetConn/refs/heads/main/core/AutoResetConn.py"
}
UPDATE_LOG = os.path.join(APP_DIR, "update_log.txt")

# Buffer t·∫°m ƒë·ªÉ hi·ªÉn th·ªã log auto-update v√†o UI sau khi UI s·∫µn s√†ng
_UPDATE_UI_BUFFER = []
def _buf(msg: str):
    _UPDATE_UI_BUFFER.append(msg)

def log_update(msg: str):
    """Ghi log auto-update ra file + buffer hi·ªÉn th·ªã l√™n UI sau khi UI c√≥."""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    line = f"[{timestamp}] {msg}"
    try:
        with open(UPDATE_LOG, "a", encoding="utf-8") as f:
            f.write(line + "\n")
    except Exception:
        pass
    print(line)
    _buf(line)

def check_for_update(auto_restart=False):
    """Ki·ªÉm tra version.txt tr√™n GitHub; n·∫øu kh√°c CURRENT_VERSION th√¨ t·∫£i FILES_TO_UPDATE."""
    try:
        log_update(f"üîç Ki·ªÉm tra c·∫≠p nh·∫≠t (hi·ªán t·∫°i: {CURRENT_VERSION})...")
        r = requests.get(VERSION_URL, timeout=7)
        if r.status_code != 200:
            log_update("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c version t·ª´ server.")
            return False

        remote_ver = r.text.strip()
        if remote_ver == CURRENT_VERSION:
            log_update("‚úÖ ƒêang d√πng b·∫£n m·ªõi nh·∫•t.")
            return False

        log_update(f"üîî Ph√°t hi·ªán b·∫£n m·ªõi: v{remote_ver} ‚Üí b·∫Øt ƒë·∫ßu t·∫£i...")
        download_and_replace(remote_ver, auto_restart)
        return True
    except Exception as e:
        log_update(f"‚ùå L·ªói khi ki·ªÉm tra c·∫≠p nh·∫≠t: {e}")
        return False

def download_and_replace(remote_ver: str, auto_restart: bool):
    """T·∫£i c√°c file trong FILES_TO_UPDATE v√† ghi ƒë√® an to√†n."""
    try:
        for local_rel, url in FILES_TO_UPDATE.items():
            dst = os.path.join(APP_DIR, local_rel)
            os.makedirs(os.path.dirname(dst), exist_ok=True)
            log_update(f"‚è¨ T·∫£i {local_rel} t·ª´ {url}")
            r = requests.get(url, timeout=15)
            if r.status_code != 200:
                log_update(f"‚ùå Kh√¥ng t·∫£i ƒë∆∞·ª£c {url} (status={r.status_code})")
                continue
            with open(dst, "w", encoding="utf-8") as f:
                f.write(r.text)
            log_update(f"‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng: {local_rel}")

        # Ghi l·∫°i version t·∫£i ƒë∆∞·ª£c (tham kh·∫£o)
        with open(os.path.join(APP_DIR, "version_local.txt"), "w", encoding="utf-8") as f:
            f.write(remote_ver)
        log_update(f"üéâ Ho√†n t·∫•t c·∫≠p nh·∫≠t ‚Üí phi√™n b·∫£n {remote_ver}")

        if auto_restart:
            log_update("üîÅ Kh·ªüi ƒë·ªông l·∫°i ƒë·ªÉ √°p d·ª•ng c·∫≠p nh·∫≠t...")
            time.sleep(1)
            os.execl(os.sys.executable, os.sys.executable, *os.sys.argv)

    except Exception as e:
        log_update(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t: {e}")

# G·ªçi auto updater NGAY khi kh·ªüi ƒë·ªông (log s·∫Ω buffer, UI xu·∫•t hi·ªán s·∫Ω flush ra log UI)
check_for_update(auto_restart=False)

# ===================== ENCRYPTION (Fernet) =====================
def load_or_create_key():
    try:
        if not os.path.exists(SECRET_KEY_PATH):
            key = Fernet.generate_key()
            with open(SECRET_KEY_PATH, "wb") as f:
                f.write(key)
        else:
            with open(SECRET_KEY_PATH, "rb") as f:
                key = f.read()
        return Fernet(key)
    except Exception as e:
        messagebox.showerror("L·ªói t·∫°o key", str(e))
        raise SystemExit

fernet = load_or_create_key()
def encrypt_password(p): return fernet.encrypt(p.encode()).decode()
def decrypt_password(p):
    try:
        return fernet.decrypt(p.encode()).decode()
    except Exception:
        return "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"

# ===================== LOGGING (TXT/ng√†y) =====================
def get_log_file():
    today = datetime.now().strftime("%Y%m%d")
    if not os.path.exists(LOG_DIR):
        os.makedirs(LOG_DIR)
    return os.path.join(LOG_DIR, f"db_reset_{today}.txt")

def log_message(msg):
    # Ghi UI
    log_area.insert(tk.END, msg + "\n")
    log_area.yview(tk.END)
    # Ghi file
    try:
        with open(get_log_file(), "a", encoding="utf-8") as f:
            f.write(f"[{datetime.now():%Y-%m-%d %H:%M:%S}] {msg}\n")
    except Exception:
        pass

def clear_log_display():
    log_area.delete(1.0, tk.END)
    log_message("üßπ Log hi·ªÉn th·ªã ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi (file log v·∫´n gi·ªØ nguy√™n).")

def flush_update_buffer_to_ui():
    """ƒê∆∞a nh·ªØng d√≤ng log auto-update ƒë√£ buffer v√†o khu v·ª±c log UI."""
    if _UPDATE_UI_BUFFER:
        for line in _UPDATE_UI_BUFFER:
            log_message(f"[AutoUpdate] {line}")
        _UPDATE_UI_BUFFER.clear()

# ===================== CONFIG MANAGEMENT =====================
def load_config_cache():
    global CONFIG_CACHE
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, "r", encoding="utf-8") as f:
                CONFIG_CACHE = json.load(f).get("configs", [])
        except Exception:
            CONFIG_CACHE = []
    else:
        CONFIG_CACHE = []

def save_config_cache():
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump({"configs": CONFIG_CACHE}, f, indent=2, ensure_ascii=False)

def set_entry_state(readonly=True):
    state = "readonly" if readonly else "normal"
    for e in [entry_host, entry_port, entry_db, entry_user, entry_pass, entry_server]:
        e.config(state=state)

def set_placeholder(entry, text):
    entry.delete(0, tk.END)
    entry.insert(0, text)
    entry.config(fg="gray")
    def on_focus_in(event):
        if entry.get() == text and entry.cget("state") == "normal":
            entry.delete(0, "end")
            entry.config(fg="black")
    def on_focus_out(event):
        if entry.get() == "" and entry.cget("state") == "normal":
            entry.insert(0, text)
            entry.config(fg="gray")
    entry.bind("<FocusIn>", on_focus_in)
    entry.bind("<FocusOut>", on_focus_out)

def clear_form():
    global edit_mode, selected_label, last_selected_name
    for e in [entry_host, entry_port, entry_db, entry_user, entry_pass, entry_server]:
        e.config(state="normal")
        e.delete(0, tk.END)
        e.config(fg="black")
    set_placeholder(entry_host, "localhost ho·∫∑c 192.168.x.x")
    set_placeholder(entry_port, "7001,6688")
    set_placeholder(entry_db, "Nh·∫≠p t√™n database")
    entry_user.insert(0, "postgres")
    set_placeholder(entry_server, "servername")

    selected_config.set("")
    selected_label = None
    last_selected_name = ""
    edit_mode = False
    btn_edit.config(text="‚úèÔ∏è S·ª≠a", bg="#f4a460", command=toggle_edit_mode)
    btn_save.config(state="normal")  # b·∫≠t l·∫°i L∆∞u c·∫•u h√¨nh
    hide_action_buttons()
    log_message("üßπ L√†m m·ªõi form (ch·∫ø ƒë·ªô nh·∫≠p m·ªõi).")

def add_new_config():
    name = entry_server.get().strip()
    if not name or entry_server.cget("fg") == "gray":
        messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p t√™n Server."); return
    if any(c["name"].lower() == name.lower() for c in CONFIG_CACHE):
        messagebox.showerror("Tr√πng t√™n", f"C·∫•u h√¨nh '{name}' ƒë√£ t·ªìn t·∫°i!"); return
    required = [
        entry_host.get().strip() if entry_host.cget("fg") != "gray" else "",
        entry_port.get().strip() if entry_port.cget("fg") != "gray" else "",
        entry_db.get().strip()   if entry_db.cget("fg") != "gray" else "",
        entry_user.get().strip()
    ]
    if any(v == "" for v in required):
        messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß Host, Port, DB, User."); return

    cfg = {
        "name": name,
        "host": entry_host.get(),
        "port": entry_port.get(),
        "db": entry_db.get(),
        "user": entry_user.get(),
        "password": encrypt_password(entry_pass.get()),
        "created": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    CONFIG_CACHE.append(cfg)
    save_config_cache()
    refresh_data_list()
    log_message(f"üíæ Th√™m c·∫•u h√¨nh m·ªõi: {name}")
    messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ th√™m c·∫•u h√¨nh '{name}'.")

def on_select_config(cfg_name):
    global selected_label, last_selected_name
    # Toggle ·∫©n/hi·ªán khi click l·∫°i c√πng c·∫•u h√¨nh
    if last_selected_name == cfg_name:
        hide_action_buttons()
        last_selected_name = ""
        selected_config.set("")
        if selected_label: selected_label.config(bg="white")
        btn_save.config(state="normal")
        return

    last_selected_name = cfg_name
    cfg = next((c for c in CONFIG_CACHE if c["name"] == cfg_name), None)
    if not cfg: return

    # highlight d√≤ng ch·ªçn
    for w in scroll_frame.winfo_children(): w.config(bg="white")
    selected_label = [w for w in scroll_frame.winfo_children() if w.cget("text") == cfg_name][0]
    selected_label.config(bg="#cce5ff")

    # ƒë·ªï d·ªØ li·ªáu & kh√≥a form (read-only)
    set_entry_state(False)
    entry_host.config(fg="black"); entry_port.config(fg="black")
    entry_db.config(fg="black"); entry_user.config(fg="black")
    entry_server.config(fg="black")
    entry_host.delete(0, tk.END); entry_host.insert(0, cfg["host"])
    entry_port.delete(0, tk.END); entry_port.insert(0, cfg["port"])
    entry_db.delete(0, tk.END); entry_db.insert(0, cfg["db"])
    entry_user.delete(0, tk.END); entry_user.insert(0, cfg["user"])
    entry_pass.delete(0, tk.END); entry_pass.insert(0, decrypt_password(cfg["password"]))
    entry_server.delete(0, tk.END); entry_server.insert(0, cfg["name"])
    set_entry_state(True)

    show_action_buttons()
    btn_save.config(state="disabled")
    log_message(f"üìÑ Hi·ªÉn th·ªã c·∫•u h√¨nh: {cfg_name}")

def toggle_edit_mode():
    global edit_mode
    if not last_selected_name:
        messagebox.showinfo("Th√¥ng b√°o", "Vui l√≤ng ch·ªçn c·∫•u h√¨nh ƒë·ªÉ s·ª≠a."); return
    if not edit_mode:
        set_entry_state(False)
        edit_mode = True
        btn_edit.config(text="üíæ L∆∞u", bg="#77b5fe", command=save_edit_changes)
        log_message("‚úèÔ∏è ƒêang ch·ªânh s·ª≠a c·∫•u h√¨nh...")

def save_edit_changes():
    global edit_mode
    old_name = last_selected_name
    new_name = entry_server.get().strip()
    if any(c["name"].lower() == new_name.lower() and c["name"].lower() != old_name.lower() for c in CONFIG_CACHE):
        messagebox.showerror("T√™n b·ªã tr√πng", f"T√™n '{new_name}' ƒë√£ t·ªìn t·∫°i!"); return

    for i, c in enumerate(CONFIG_CACHE):
        if c["name"].lower() == old_name.lower():
            CONFIG_CACHE[i] = {
                "name": new_name,
                "host": entry_host.get(),
                "port": entry_port.get(),
                "db": entry_db.get(),
                "user": entry_user.get(),
                "password": encrypt_password(entry_pass.get()),
                "created": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            break
    save_config_cache()
    refresh_data_list()
    log_message(f"‚úÖ C·∫≠p nh·∫≠t c·∫•u h√¨nh '{old_name}' ‚Üí '{new_name}'.")
    edit_mode = False
    btn_edit.config(text="‚úèÔ∏è S·ª≠a", bg="#f4a460", command=toggle_edit_mode)
    btn_save.config(state="normal")

def delete_config():
    global last_selected_name
    name = last_selected_name
    if not name: return
    if not messagebox.askyesno("X√°c nh·∫≠n",
                               f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a '{name}'?\nSau khi x√≥a s·∫Ω kh√¥ng th·ªÉ kh√¥i ph·ª•c."):
        return
    CONFIG_CACHE[:] = [c for c in CONFIG_CACHE if c["name"] != name]
    save_config_cache()
    refresh_data_list()
    clear_form()
    log_message(f"üóë ƒê√£ x√≥a c·∫•u h√¨nh: {name}")

def refresh_data_list():
    for w in scroll_frame.winfo_children(): w.destroy()
    for cfg in CONFIG_CACHE:
        lbl = tk.Label(scroll_frame, text=cfg["name"], bg="white", anchor="w", font=("Segoe UI", 10), padx=5)
        lbl.bind("<Enter>", lambda e, b=lbl: b.config(bg="#e6f2ff") if b.cget("bg") == "white" else None)
        lbl.bind("<Leave>", lambda e, b=lbl: b.config(bg="white") if b.cget("bg") == "#e6f2ff" else None)
        lbl.bind("<Button-1>", lambda e, name=cfg["name"]: on_select_config(name))
        lbl.pack(fill="x", padx=5, pady=1)
    hide_action_buttons()

# ===================== K·∫æT N·ªêI & RESET =====================
def test_connection():
    try:
        conn = psycopg2.connect(
            host=entry_host.get(),
            port=int(entry_port.get().split(",")[0]),
            database=entry_db.get(),
            user=entry_user.get(),
            password=entry_pass.get(),
            connect_timeout=5
        )
        conn.close()
        log_message("‚úÖ Test connection OK.")
    except Exception as e:
        log_message(f"‚ùå Test connection failed: {e}")

def reset_connection(manual=False):
    """Reset: kill m·ªçi session tr·ª´ session hi·ªán t·∫°i. Log chi ti·∫øt t·ª´ng port."""
    host, ports, db, user, pw, name = (
        entry_host.get(),
        entry_port.get().split(","),
        entry_db.get(),
        entry_user.get(),
        entry_pass.get(),
        entry_server.get()
    )

    log_message(f"üü¶ B·∫Øt ƒë·∫ßu reset cho server [{name}]...")

    success_count = 0
    fail_count = 0

    for p in [x.strip() for x in ports if x.strip()]:
        try:
            conn = psycopg2.connect(
                host=host, port=int(p), database=db,
                user=user, password=pw, connect_timeout=5
            )
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT pg_terminate_backend(pid)
                    FROM pg_stat_activity
                    WHERE pid <> pg_backend_pid();
                """)
            conn.commit()
            conn.close()
            success_count += 1
            log_message(f"‚úÖ [{name}] Reset DB port {p} th√†nh c√¥ng.")
        except Exception as e:
            fail_count += 1
            log_message(f"‚ùå [{name}] Reset DB port {p} th·∫•t b·∫°i: {e}")

    total = success_count + fail_count
    log_message(f"üèÅ Ho√†n t·∫•t reset [{name}] ({'Th·ªß c√¥ng' if manual else 'T·ª± ƒë·ªông'}) - "
                f"T·ªïng: {total} | OK: {success_count} | L·ªói: {fail_count}\n")

def start_auto_reset():
    global running, reset_thread
    if running: return
    running = True
    reset_thread = threading.Thread(target=auto_reset_loop, daemon=True)
    reset_thread.start()
    log_message("‚ñ∂Ô∏è Auto reset started.")

def auto_reset_loop():
    global running
    while running:
        reset_connection()
        log_message("‚è∞ Ch·ªù 1 gi·ªù tr∆∞·ªõc l·∫ßn reset ti·∫øp theo...\n")
        time.sleep(3600)

def stop_auto_reset():
    global running
    running = False
    log_message("üõë Auto reset stopped.")

# ===================== UI =====================
app = tk.Tk()
app.title(f"Auto Reset DB Tool v{CURRENT_VERSION}")
app.geometry("980x630")

# LEFT FORM
frame_left = tk.Frame(app)
frame_left.grid(row=0, column=0, padx=10, pady=10, sticky="n")

labels = ["Host:", "Port:", "Database name:", "User DB:", "Password DB:", "Server name:"]
entries = []
for i, text in enumerate(labels):
    tk.Label(frame_left, text=text).grid(row=i, column=0, sticky="e")
    e = tk.Entry(frame_left, width=30, show="*" if "Password" in text else None)
    e.grid(row=i, column=1)
    entries.append(e)

entry_host, entry_port, entry_db, entry_user, entry_pass, entry_server = entries
# placeholder m·∫∑c ƒë·ªãnh
set_placeholder(entry_host, "localhost ho·∫∑c 192.168.x.x")
set_placeholder(entry_port, "7001,6688")
set_placeholder(entry_db, "Nh·∫≠p t√™n database")
entry_user.insert(0, "postgres")
set_placeholder(entry_server, "servername")

tk.Button(frame_left, text="üîÑ L√†m m·ªõi", bg="#77dd77", command=clear_form)\
    .grid(row=7, column=0, sticky="e", pady=10)
btn_save = tk.Button(frame_left, text="üíæ L∆∞u c·∫•u h√¨nh", bg="#77b5fe", command=add_new_config)
btn_save.grid(row=7, column=1, sticky="w", pady=10)
tk.Button(frame_left, text="üîå Ki·ªÉm tra k·∫øt n·ªëi", bg="#a1eafb", command=test_connection)\
    .grid(row=8, column=1, sticky="e", pady=5)
tk.Button(frame_left, text="‚ö° Reset ngay", bg="#ffd966", command=lambda: reset_connection(True))\
    .grid(row=9, column=1, sticky="e", pady=5)
tk.Button(frame_left, text="‚ñ∂Ô∏è Auto Reset", bg="#44c767", command=start_auto_reset)\
    .grid(row=10, column=1, sticky="e", pady=5)
tk.Button(frame_left, text="üõë D·ª´ng", bg="#e06666", command=stop_auto_reset)\
    .grid(row=11, column=1, sticky="e", pady=5)

# RIGHT LIST
frame_right = tk.Frame(app)
frame_right.grid(row=0, column=1, padx=10, pady=10, sticky="n")
tk.Label(frame_right, text="Danh s√°ch c·∫•u h√¨nh:").pack()

canvas = Canvas(frame_right, height=220, width=260)
scrollbar = tk.Scrollbar(frame_right, orient="vertical", command=canvas.yview)
scroll_frame = tk.Frame(canvas, bg="white")
scroll_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
canvas.create_window((0, 0), window=scroll_frame, anchor="nw")
canvas.configure(yscrollcommand=scrollbar.set)
canvas.pack(side="left", fill="both", expand=True)
scrollbar.pack(side="right", fill="y")

selected_config = tk.StringVar()
frame_buttons = tk.Frame(frame_right); frame_buttons.pack(pady=10)
btn_use = tk.Button(frame_buttons, text="‚ñ∂ D√πng", bg="#c2dfff",
                    command=lambda: on_select_config(last_selected_name))
btn_edit = tk.Button(frame_buttons, text="‚úèÔ∏è S·ª≠a", bg="#f4a460", command=toggle_edit_mode)
btn_delete = tk.Button(frame_buttons, text="‚ùå X√≥a", bg="#ff6961", command=delete_config)
def hide_action_buttons():
    btn_use.grid_remove(); btn_edit.grid_remove(); btn_delete.grid_remove()
def show_action_buttons():
    btn_use.grid(row=0, column=0, padx=5); btn_edit.grid(row=0, column=1, padx=5); btn_delete.grid(row=0, column=2, padx=5)

# LOG UI
tk.Label(app, text="Log ho·∫°t ƒë·ªông:").grid(row=1, column=0, columnspan=2)
log_area = scrolledtext.ScrolledText(app, width=120, height=16)
log_area.grid(row=2, column=0, columnspan=2, padx=10, pady=5)
log_menu = Menu(app, tearoff=0)
log_menu.add_command(label="üßπ X√≥a log hi·ªÉn th·ªã", command=clear_log_display)
log_area.bind("<Button-3>", lambda e: log_menu.tk_popup(e.x_root, e.y_root))

# INIT
load_config_cache()
refresh_data_list()
flush_update_buffer_to_ui()  # ƒë∆∞a log auto-update ƒë√£ buffer v√†o UI
log_message(f"üöÄ Tool v{CURRENT_VERSION} kh·ªüi ƒë·ªông th√†nh c√¥ng.")
app.mainloop()